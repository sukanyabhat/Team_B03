closeAllConnections()
rm(list=ls())

library(forecast)
library(dplyr)



#Read data file 

godaddy <- read.table('student_data_20160418.txt',header = TRUE,sep='\t')##nrow(godaddy) 358666
godaddy[[1]] <- strptime(as.character(godaddy[[1]]), "%m/%d/%Y")##nrow(godaddy)

#Sampling
godaddy=subset(godaddy,godaddy[[1]]>"2012-12-31")##nrow(godaddy) 263681

godaddy$tot_row_flag=ifelse((godaddy[[2]]=='Total' | godaddy[[3]]=='Total' | godaddy[[4]]=='Total'),1,0)
godaddy$tot_1_flag=ifelse((godaddy[[2]]=='Total' & godaddy[[3]]!='Total' & godaddy[[4]]!='Total'),1,0)
godaddy$tot_2_flag=ifelse((godaddy[[2]]!='Total' & godaddy[[3]]=='Total' & godaddy[[4]]!='Total'),1,0)
godaddy$tot_3_flag=ifelse((godaddy[[2]]!='Total' & godaddy[[3]]!='Total' & godaddy[[4]]=='Total'),1,0)
godaddy$tot_1_2_flag=ifelse((godaddy[[2]]=='Total' & godaddy[[3]]=='Total' & godaddy[[4]]!='Total'),1,0)
godaddy$tot_2_3_flag=ifelse((godaddy[[2]]!='Total' & godaddy[[3]]=='Total' & godaddy[[4]]=='Total'),1,0)
godaddy$tot_1_3_flag=ifelse((godaddy[[2]]=='Total' & godaddy[[3]]!='Total' & godaddy[[4]]=='Total'),1,0)
godaddy$tot_1_2_3_flag=ifelse((godaddy[[2]]=='Total' & godaddy[[3]]=='Total' & godaddy[[4]]=='Total'),1,0)

godaddy_set_1=subset(godaddy,godaddy$tot_row_flag==0,select = c(1:(ncol(godaddy)-8)))##nrow(godaddy_set_1) 165728

#godaddy_set_2=subset(godaddy,godaddy$tot_1_flag==1,select = c(1,3:(ncol(godaddy)-8))) ##nrow(godaddy_set_2) 
godaddy_set_3=subset(godaddy,godaddy$tot_2_flag==1,select = c(1,2,4:(ncol(godaddy)-8))) ##nrow(godaddy_set_3) 68272
godaddy_set_4=subset(godaddy,godaddy$tot_3_flag==1,select = c(1:3,5:(ncol(godaddy)-8))) ##nrow(godaddy_set_4) 16048

# correct 5
godaddy_set_5=subset(godaddy,godaddy$tot_1_2_flag==1,select = c(1,4:(ncol(godaddy)-8))) ##nrow(godaddy_set_5) 12630
#godaddy_set_6=subset(godaddy,godaddy$tot_2_3_flag==1,select = c(1,2,5:(ncol(godaddy)-8))) ##nrow(godaddy_set_6) 
#godaddy_set_7=subset(godaddy,godaddy$tot_1_3_flag==1,select = c(1,3,5:(ncol(godaddy)-8))) ##nrow(godaddy_set_7) 

#ignore this set for now----need to come back to this
#godaddy_set_8=subset(godaddy,godaddy$tot_1_2_3_flag==1,select = c(1,5:(ncol(godaddy)-8))) ##nrow(godaddy_set_8) 1003

#165728+68272+16048+12630+1003


#Here we know that column 2,3,4 are dimension columns
sample_dimension_combinations=sample_n(unique(subset(godaddy,godaddy$tot_row_flag==0,select = c(2,3,4))),5)
#sample_sub_combinations_6=unique(subset(sample_dimension_combinations,select = c(1)))
#sample_sub_combinations_7=unique(subset(sample_dimension_combinations,select = c(2)))
sample_sub_combinations_5=unique(subset(sample_dimension_combinations,select = c(3)))
sample_sub_combinations_4=unique(subset(sample_dimension_combinations,select = c(1,2)))
#sample_sub_combinations_2=unique(subset(sample_dimension_combinations,select = c(2,3)))
sample_sub_combinations_3=unique(subset(sample_dimension_combinations,select = c(1,3)))

godaddy_set_1=merge(godaddy_set_1,sample_dimension_combinations)[, (names(godaddy_set_1))]
#godaddy_set_2=merge(godaddy_set_2,sample_sub_combinations_2)[,(names(godaddy_set_2))]
godaddy_set_3=merge(godaddy_set_3,sample_sub_combinations_3)[, (names(godaddy_set_3))]

godaddy_set_4=merge(godaddy_set_4,sample_sub_combinations_4)[, (names(godaddy_set_4))]
godaddy_set_5=merge(godaddy_set_5,sample_sub_combinations_5)[, (names(godaddy_set_5))]
#godaddy_set_6=merge(godaddy_set_6,sample_sub_combinations_6)[, (names(godaddy_set_6))]
#godaddy_set_7=merge(godaddy_set_7,sample_sub_combinations_7)[, (names(godaddy_set_7))]

#filling up missing rows
#temp fix, generally expect the missing dimensions to be filled with 0 values


grp=sample_dimension_combinations
date_list=unique(subset(godaddy,select = c(1)))
master_list=merge(date_list,grp)
master_list <- master_list[order(master_list[[1]], master_list[[2]], master_list[[3]], master_list[[4]]),]
godaddy_set_1=merge(godaddy_set_1,master_list,all.y = TRUE)
godaddy_set_1[,(ncol(master_list)+1):ncol(godaddy_set_1) ][is.na(godaddy_set_1[,(ncol(master_list)+1):ncol(godaddy_set_1)])]=0

# grp=sample_sub_combinations_2
# date_list=unique(subset(godaddy,select = c(1)))
# master_list=merge(date_list,grp)
# master_list <- master_list[order(master_list[[1]], master_list[[2]], master_list[[3]]),]
# godaddy_set_2=merge(godaddy_set_2,master_list,all.y = TRUE)
# godaddy_set_2[,(ncol(master_list)+1):ncol(godaddy_set_2) ][is.na(godaddy_set_2[,(ncol(master_list)+1):ncol(godaddy_set_2)])]=0

grp=sample_sub_combinations_3
date_list=unique(subset(godaddy,select = c(1)))
master_list=merge(date_list,grp)
master_list <- master_list[order(master_list[[1]], master_list[[2]], master_list[[3]]),]
godaddy_set_3=merge(godaddy_set_3,master_list,all.y = TRUE)
godaddy_set_3[,(ncol(master_list)+1):ncol(godaddy_set_3) ][is.na(godaddy_set_3[,(ncol(master_list)+1):ncol(godaddy_set_3)])]=0

grp=sample_sub_combinations_4
date_list=unique(subset(godaddy,select = c(1)))
master_list=merge(date_list,grp)
master_list <- master_list[order(master_list[[1]], master_list[[2]], master_list[[3]]),]
godaddy_set_4=merge(godaddy_set_4,master_list,all.y = TRUE)
godaddy_set_4[,(ncol(master_list)+1):ncol(godaddy_set_4) ][is.na(godaddy_set_4[,(ncol(master_list)+1):ncol(godaddy_set_4)])]=0

grp=sample_sub_combinations_5
date_list=unique(subset(godaddy,select = c(1)))
master_list=merge(date_list,grp)
master_list <- master_list[order(master_list[[1]], master_list[[2]]),]
godaddy_set_5=merge(godaddy_set_5,master_list,all.y = TRUE)
godaddy_set_5[,(ncol(master_list)+1):ncol(godaddy_set_5) ][is.na(godaddy_set_5[,(ncol(master_list)+1):ncol(godaddy_set_5)])]=0

# grp=sample_sub_combinations_6
# date_list=unique(subset(godaddy,select = c(1)))
# master_list=merge(date_list,grp)
# master_list <- master_list[order(master_list[[1]], master_list[[2]]),]
# godaddy_set_6=merge(godaddy_set_6,master_list,all.y = TRUE)
# godaddy_set_6[,(ncol(master_list)+1):ncol(godaddy_set_6) ][is.na(godaddy_set_6[,(ncol(master_list)+1):ncol(godaddy_set_6)])]=0
# 
# grp=sample_sub_combinations_7
# date_list=unique(subset(godaddy,select = c(1)))
# master_list=merge(date_list,grp)
# master_list <- master_list[order(master_list[[1]], master_list[[2]]),]
# godaddy_set_7=merge(godaddy_set_7,master_list,all.y = TRUE)
# godaddy_set_7[,(ncol(master_list)+1):ncol(godaddy_set_7) ][is.na(godaddy_set_7[,(ncol(master_list)+1):ncol(godaddy_set_7)])]=0



subset=c("godaddy_set_1","godaddy_set_2","godaddy_set_3","godaddy_set_4","godaddy_set_5","godaddy_set_6","godaddy_set_7","godaddy_set_8")
dimension_table=c("sample_dimension_combinations","sample_sub_combinations_2","sample_sub_combinations_3","sample_sub_combinations_4","sample_sub_combinations_5","sample_sub_combinations_6","sample_sub_combinations_7","sample_sub_combinations_8")
dimension_number=c(ncol(sample_dimension_combinations),2,2,ncol(sample_sub_combinations_4),ncol(sample_sub_combinations_5),1,1,0)


Xref_table=data.frame(subset,dimension_table,dimension_number)
Xref_table <<- Xref_table


head(godaddy_set_1)
data=godaddy_set_1
dimension_col=c(2,3,4)

#how to not hard code here?
metric_passed=5

#Anomaly_Detection(godaddy_set_1)
#Anomaly_Detection=function(data){
data=godaddy_set_1
#dimension_number=Xref_table$dimension_number[Xref_table$subset==deparse(substitute(data))]
dimension_number=Xref_table$dimension_number[Xref_table$subset=="godaddy_set_1"]


#Read Initial prediction file 
#Write code to create this
initial_pred <- read.csv(paste("Threshold_Initial_","godaddy_set_1",".csv",sep = ""),header = FALSE)
#initial_pred <- read.csv(paste("Threshold_Initial_",deparse(substitute(data)),".csv",sep = ""),header = FALSE)

initial_pred[[2]] <- strptime(as.character(initial_pred[[2]]), "%Y-%m-%d")
j=(dimension_number+2)
for (j in (dimension_number+2):ncol(data)){
#Check metric
  
initial_prediction =subset(initial_pred,initial_pred[[1]]==colnames(data)[j],select=c(2:ncol(initial_pred)))

#get the current date observed values
godaddy_current_data_set=subset(data,data[[1]]==unique(initial_prediction[[1]]))

colnames(initial_prediction)=colnames(data)
#join with predictions to check where the metric is less than predicted
merged=merge(godaddy_current_data_set,initial_prediction)
anomalies=subset(merged, merged[,metric_passed]<prediction_lower)


#choose only required columns
anomalies <- subset(anomalies, select = c(c(orderdate),dimension_col,c(metric_passed),c(prediction,prediction_lower,prediction_upper)))

#creating empty copy
predictions=subset(initial_pred,metric_passed=='Dummy')


#Train data from Jan 2012 - Jan 1 2015
data_train=subset(data,orderdate <= '2015-01-01')


#unique groups
grp=unique(subset(data,select = dimension_col))

i=1
#For every group
for(i in 1:(nrow(grp))) {
  
  
  #ideally this would be in a for loop and subset the data in phases depending on number of columns in the dimension_col    
  if(length(dimension_col)==3){ 
    time_series_data=subset(data_train,(data_train[,1]==grp[i,1]) & (data_train[,2] == grp[i,2]) & (data_train[,3]==grp[i,3]),select = c(metric_passed))
  }
  if(length(dimension_col)==2){ 
    time_series_data=subset(data_train,(data_train[,1]==grp[i,1]) & (data_train[,2] == grp[i,2]) ,select = c(metric_passed))
  }
  if(length(dimension_col)==1){ 
    time_series_data=subset(data_train,(data_train[,1]==grp[i,1]) ,select = c(metric_passed))
  }
  #order by date
  if (mean(time_series_data[,1]) == 0)
    next
  if (dim(time_series_data)[1] < 30)
    next
  #need to think if this helps or not
  
  #find outliers and the best replacement values
  g<-data.frame(tsoutliers(time_series_data[,1]))
  #replace
  time_series_data[g$index,1]=g$replacements
  #convert to time series , units of 7 days
  
  
  time_series_data=msts(time_series_data,seasonal.periods=c(7,365))
  #next day prediction
  pred_arima=forecast(tbats(time_series_data,parallel = TRUE),h=1)
  
  #absolute prediction
  abs_pred<-pred_arima$mean[1]
  #lower threshold
  prediction_min<-pred_arima$lower[2]
  #upper threshold
  prediction_max<-pred_arima$upper[2]
  #combine with old predictions
  
  predictions=rbind(predictions,cbind(grp[i,],"2015-01-02",metric_name,abs_pred,prediction_min,prediction_max))
}


colnames(predictions)=colnames(initial_pred)
#test set 2 jan onwards
data_test=subset(data,orderdate > '2015-01-01' & orderdate <= '2015-01-04')
#list of dats in test
date=unique(subset(data_test[order(data_test$orderdate),],select = c(orderdate)))
#for each date

for(i in 1:nrow(date)) {
  
  
  current_date=format(date[i,1],"%Y-%m-%d")
  print(current_date)
  current_date_observed=subset(data_test,orderdate==current_date)
  merged=merge(predictions,current_date_observed)
  anomalies_new=subset(merged, merged[,metric_passed]<prediction_lower)
  anomalies_new <- subset(anomalies_new, select = c(c(orderdate),dimension_col,c(metric_passed),c(prediction,prediction_lower,prediction_upper)))
  
  merged[,c(7,10)]
  
  anomalies=rbind(anomalies,anomalies_new)
  data_train=rbind(data_train,current_date_observed)
  
  next_day=as.Date(current_date)+1
  next_day=format(next_day,"%Y-%m-%d") 
  predictions=subset(predictions,predictions[,1]=='Dummy')
  
  
  
  for(j in 1:(nrow(grp))) {
    if(length(dimension_col)==3){ 
      time_series_data=subset(data_train,(data_train[,1]==grp[j,1]) & (data_train[,2] == grp[j,2]) & (data_train[,3]==grp[j,3]),select = c(metric_passed))
    }
    if(length(dimension_col)==2){ 
      time_series_data=subset(data_train,(data_train[,1]==grp[j,1]) & (data_train[,2] == grp[j,2]) ,select = c(metric_passed))
    }
    if(length(dimension_col)==1){ 
      time_series_data=subset(data_train,(data_train[,1]==grp[j,1]) ,select = c(metric_passed))
    }
    #order by date
    if (mean(time_series_data[,1]) == 0)
      next
    if (dim(time_series_data)[1] < 30)
      next
    #need to think if this helps or not
    
    #find outliers and the best replacement values
    g<-data.frame(tsoutliers(time_series_data[,1]))
    #replace
    time_series_data[g$index,1]=g$replacements
    #convert to time series , units of 7 days
    
    
    time_series_data=msts(time_series_data,seasonal.periods=c(7,365))
    #next day prediction
    pred_arima=forecast(tbats(time_series_data,parallel = TRUE),h=1)
    
    #absolute prediction
    abs_pred<-pred_arima$mean[1]
    #lower threshold
    prediction_min<-pred_arima$lower[2]
    #upper threshold
    prediction_max<-pred_arima$upper[2]
    #combine with old predictions
    predictions=rbind(predictions,cbind(grp[j,],next_day,metric_name,abs_pred,prediction_min,prediction_max))
  }
  colnames(predictions)=colnames(initial_pred)
  
  print(as.Date(current_date)+1)
  
  write.csv(anomalies,"Output_today.csv",row.names = F)  
  output=merge(godaddy,anomalies,all.x=TRUE)
  write.csv(output,"Comparison_Report.csv",row.names = F,col.names = F)
  
}
